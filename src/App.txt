import React, { useEffect, useState } from 'react';
import { decode as atob, encode as btoa } from 'base-64';
import {
  ScrollView,
  Text,
  View,
  PermissionsAndroid,
  Platform,
  Button,
  Alert,
} from 'react-native';
import { Colors } from 'react-native/Libraries/NewAppScreen';
import { BleManager, Characteristic, Device } from 'react-native-ble-plx';

const manager = new BleManager();

const SERVICE_UUID = "4fafc201-1fb5-459e-8fcc-c5c9c331914b";
const SET_CHARACTERISTIC_UUID = "6e400003-b5a3-f393-e0a9-e50e24dcca9e";
const REP_COUNT_CHAR_UUID = "beb5483e-36e1-4688-b7f5-ea07361b26a8";
const COMMAND_CHAR_UUID = "6e400002-b5a3-f393-e0a9-e50e24dcca9e";

function App() {
  const [device, setDevice] = useState<Device | null>(null);
  const [foundDevices, setFoundDevices] = useState<Device[]>([]);
  const [repCount, setRepCount] = useState(0);
  const [commandChar, setCommandChar] = useState<Characteristic | null>(null);
  const [isRecording, setIsRecording] = useState(false);
  const [setSummaries, setSetSummaries] = useState<any[]>([]);

  useEffect(() => {
    console.log("Total SET summaries:", setSummaries.length);
  }, [setSummaries]);

  useEffect(() => {
    if (Platform.OS === 'android') {
      PermissionsAndroid.requestMultiple([
        PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN,
        PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT,
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      ]);
    }
  }, []);

  useEffect(() => {
    if (isRecording) {
      sendCommand('START_RECORDING');
    } else {
      sendCommand('STOP_RECORDING');
    }
  }, [isRecording]);

  const startScan = () => {
    manager.startDeviceScan(null, null, (error, scannedDevice) => {
      if (error || !scannedDevice?.name) return;
      setFoundDevices((prev) =>
        prev.find((d) => d.id === scannedDevice.id) ? prev : [...prev, scannedDevice]
      );
    });
  };

  const connectDevice = async (device: Device) => {
    manager.stopDeviceScan();
    try {
      const connectedDevice = await device.connect();
      await connectedDevice.discoverAllServicesAndCharacteristics();
      setDevice(connectedDevice);

      const services = await connectedDevice.services();
      for (const service of services) {
        const characteristics = await service.characteristics();
        for (const char of characteristics) {
          if (char.uuid.toLowerCase() === COMMAND_CHAR_UUID) {
            setCommandChar(char);
          }
        }
      }

      subscribeToSetData(connectedDevice);
      subscribeToRepData(connectedDevice);
    } catch (error) {
      console.log('Connection failed', error);
      setDevice(null);
    }
  };

  const subscribeToSetData = (device: Device) => {
    device.monitorCharacteristicForService(SERVICE_UUID, SET_CHARACTERISTIC_UUID, (error, characteristic) => {
      if (error || !characteristic?.value) return;
      try {
        const jsonString = atob(characteristic.value);
        const dataArray  = JSON.parse(jsonString);
        if (!Array.isArray(dataArray)){
          console.warn("SET payload not an array", jsonString);
          return;
        }

        setSetSummaries(prev => {
          const newIds = new Set(prev.map(item => item.id));
          const filtered = dataArray.filter(item => !newIds.has(item.id));
          return [...prev, ...filtered];
        });
      } catch (e) {
        console.warn("SET parsing error", e);
      }
    });
  };

  const subscribeToRepData = (device: Device) => {
    device.monitorCharacteristicForService(SERVICE_UUID, REP_COUNT_CHAR_UUID, (error, characteristic) => {
      if (error || !characteristic?.value) return;
      const value = parseInt(atob(characteristic.value), 10);
      setRepCount(value);
    });
  };

  const sendCommand = async (cmd: string) => {
    if (!commandChar) return;
    try {
      const encoded = btoa(cmd);
      await commandChar.writeWithResponse(encoded);
    } catch (err) {
      console.warn("Write error", err);
    }
  };

return (
    <View style={[{backgroundColor: Colors.lighter, flex: 1, padding: 20}]}>
      <View>
        <Text>This is the Header</Text>
      </View>
      <View>
        <Button title="Scan for Devices" onPress={startScan}></Button>
        <Text>Scanned Devices</Text>
        <ScrollView>
        {foundDevices.map((device) => (
          <Button title={device.name ?? "Unknown"} onPress={() => connectDevice(device)}></Button>
          
        ))}
        </ScrollView>
        <Text>Connected Device: {device?.name || "None"}</Text>
        <Text>Rep Count: {repCount} </Text>
        <Text>Velocity: </Text>
        <Button title={"Recording: " + isRecording} onPress={() => setIsRecording(!isRecording)} />\
        <ScrollView>
          {setSummaries.map((item, index) => (
            <Text id={item.id} key={index}>
              Set {item.set}, Rep {item.rep}, Duration {item.dur}, Tempo: {(item.tempo ?? []).join("-")}
            </Text>
          ))}
        </ScrollView>
      </View>
    </View>
  );
}
export default App;
